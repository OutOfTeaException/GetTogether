// <auto-generated />
using System;
using GetTogether.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GetTogether.Migrations
{
    [DbContext(typeof(GetTogetherContext))]
    [Migration("20180704195652_AddedMoreSeedData")]
    partial class AddedMoreSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799");

            modelBuilder.Entity("GetTogether.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("DateSearchId");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateSearchId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GetTogether.Models.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DateSearchId");

                    b.HasKey("Id");

                    b.HasIndex("DateSearchId")
                        .IsUnique();

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("GetTogether.Models.DateProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("DateSearchId");

                    b.Property<DateTime>("ProposedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateSearchId");

                    b.ToTable("DateProposals");
                });

            modelBuilder.Entity("GetTogether.Models.DateSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<int?>("GroupId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroupId");

                    b.ToTable("DateSearches");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 5, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), Description = "Zur Heideblüte in die Lüneburger Heide", GroupId = 1, Name = "Lüneburger Heide" },
                        new { Id = 2, CreatedAt = new DateTime(2018, 5, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), Description = "Sehr böse :)", GroupId = 2, Name = "Deadpool 2" }
                    );
                });

            modelBuilder.Entity("GetTogether.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Groups");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 5, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), Name = "Die Wandersleut" },
                        new { Id = 2, CreatedAt = new DateTime(2018, 5, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), Name = "Kino" }
                    );
                });

            modelBuilder.Entity("GetTogether.Models.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<bool>("EMailSent");

                    b.Property<string>("Email");

                    b.Property<int?>("IntoGroupId");

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IntoGroupId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("GetTogether.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("EMail");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 5, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), Name = "User 1" }
                    );
                });

            modelBuilder.Entity("GetTogether.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroup");

                    b.HasData(
                        new { UserId = 1, GroupId = 1 },
                        new { UserId = 1, GroupId = 2 }
                    );
                });

            modelBuilder.Entity("GetTogether.Models.Comment", b =>
                {
                    b.HasOne("GetTogether.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GetTogether.Models.DateSearch", "DateSearch")
                        .WithMany()
                        .HasForeignKey("DateSearchId");
                });

            modelBuilder.Entity("GetTogether.Models.Date", b =>
                {
                    b.HasOne("GetTogether.Models.DateSearch", "DateSearch")
                        .WithOne("FinalDate")
                        .HasForeignKey("GetTogether.Models.Date", "DateSearchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GetTogether.Models.DateProposal", b =>
                {
                    b.HasOne("GetTogether.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GetTogether.Models.DateSearch", "DateSearch")
                        .WithMany("Proposals")
                        .HasForeignKey("DateSearchId");
                });

            modelBuilder.Entity("GetTogether.Models.DateSearch", b =>
                {
                    b.HasOne("GetTogether.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GetTogether.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("GetTogether.Models.Group", b =>
                {
                    b.HasOne("GetTogether.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("GetTogether.Models.Invitation", b =>
                {
                    b.HasOne("GetTogether.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GetTogether.Models.Group", "IntoGroup")
                        .WithMany("Invitations")
                        .HasForeignKey("IntoGroupId");
                });

            modelBuilder.Entity("GetTogether.Models.UserGroup", b =>
                {
                    b.HasOne("GetTogether.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GetTogether.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
